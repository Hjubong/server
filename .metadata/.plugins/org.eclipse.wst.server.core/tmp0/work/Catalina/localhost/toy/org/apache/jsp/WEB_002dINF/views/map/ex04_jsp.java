/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.82
 * Generated at: 2023-11-07 01:32:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex04_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1697652634000L));
    _jspx_dependants.put("jar:file:/C:/class/code/server/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ToyProject/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"http://pinnpublic.dothome.co.kr/cdn/example-min.css\">\r\n");
      out.write("<style>\r\n");
      out.write("#main {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	align-items: flex-start;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#main table {\r\n");
      out.write("	width: 384px;\r\n");
      out.write("	margin: 0px 16px;\r\n");
      out.write("	margin-bottom: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#list td {\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#list td span:last-child {\r\n");
      out.write("	float: right;\r\n");
      out.write("	display: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#list td:hover span:last-child {\r\n");
      out.write("	display: inline;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"wide\">\r\n");
      out.write("	<!-- ex04.jsp -->\r\n");
      out.write("	<h1>\r\n");
      out.write("		Map <small>즐겨찾기(CRD)</small>\r\n");
      out.write("	</h1>\r\n");
      out.write("\r\n");
      out.write("	<div id=\"main\">\r\n");
      out.write("		<div id=\"map\" style=\"width: 768px; height: 400px;\"></div>\r\n");
      out.write("		<div>\r\n");
      out.write("			<table>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td><select name=\"category\" id=\"category\">\r\n");
      out.write("							<option value=\"default\">기본</option>\r\n");
      out.write("							<option value=\"cafe\">카페</option>\r\n");
      out.write("							<option value=\"food\">음식점</option>\r\n");
      out.write("							<option value=\"private\">개인</option>\r\n");
      out.write("					</select> <input type=\"text\" name=\"name\" id=\"name\" class=\"middle\"> <input\r\n");
      out.write("						type=\"button\" value=\"추가하기\" id=\"btn\"></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("\r\n");
      out.write("			<table id=\"list\">\r\n");
      out.write("				<tbody></tbody>\r\n");
      out.write("				<!-- \r\n");
      out.write("			<tr>\r\n");
      out.write("				<td>AAA</td>\r\n");
      out.write("			</tr> \r\n");
      out.write("			-->\r\n");
      out.write("			</table>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script type=\"text/javascript\"\r\n");
      out.write("		src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=d9a9dc5f180000f50bb124866e70f51a\"></script>\r\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-1.12.4.js\"></script>\r\n");
      out.write("	<script src=\"http://pinnpublic.dothome.co.kr/cdn/example-min.js\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("	\r\n");
      out.write("		const container = document.getElementById('map'); \r\n");
      out.write("			\r\n");
      out.write("		const options = {\r\n");
      out.write("			center: new kakao.maps.LatLng(37.499316, 127.033192),\r\n");
      out.write("			level: 3\r\n");
      out.write("		};\r\n");
      out.write("	\r\n");
      out.write("		const map = new kakao.maps.Map(container, options);\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		//클릭 이벤트 + 원하는 장소에 마커 추가하기(DB 작업 X)\r\n");
      out.write("		\r\n");
      out.write("		let m = null;\r\n");
      out.write("		let lat = null;\r\n");
      out.write("		let lng = null;\r\n");
      out.write("		\r\n");
      out.write("		kakao.maps.event.addListener(map, 'click', function(evt) {\r\n");
      out.write("			\r\n");
      out.write("			lat = evt.latLng.getLat();\r\n");
      out.write("			lng = evt.latLng.getLng();\r\n");
      out.write("			\r\n");
      out.write("			if (m != null) {\r\n");
      out.write("				//기존 마커 제거\r\n");
      out.write("				m.setMap(null);\r\n");
      out.write("			} \r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			//카테고리 확인\r\n");
      out.write("			//$('#category').val() > 아이콘 이미지명\r\n");
      out.write("			\r\n");
      out.write("			let imageUrl = '/toy/asset/marker/'+ $('#category').val() +'.png';\r\n");
      out.write("			\r\n");
      out.write("			let imageSize = new kakao.maps.Size(40, 40);\r\n");
      out.write("			\r\n");
      out.write("			let option = {\r\n");
      out.write("				//spriteOrigin: new kakao.maps.Point(10, 20),\r\n");
      out.write("				//spriteSize: new kakao.maps.Size(36, 98)\r\n");
      out.write("			};\r\n");
      out.write("			\r\n");
      out.write("			let markerImage = new kakao.maps.MarkerImage(imageUrl, imageSize, option);\r\n");
      out.write("			\r\n");
      out.write("			m = new kakao.maps.Marker({\r\n");
      out.write("				position: new kakao.maps.LatLng(lat, lng)\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			m.setImage(markerImage);\r\n");
      out.write("			m.setMap(map);\r\n");
      out.write("			\r\n");
      out.write("			$('#name').select();\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		$('#category').change(function(){\r\n");
      out.write("			\r\n");
      out.write("			//마커가 있다면 > 아이콘 변경\r\n");
      out.write("			if(m != null){\r\n");
      out.write("				\r\n");
      out.write("				let imageUrl = '/toy/asset/marker/'+ $('#category').val() +'.png';\r\n");
      out.write("				\r\n");
      out.write("				let imageSize = new kakao.maps.Size(40, 40);\r\n");
      out.write("				\r\n");
      out.write("				let option = {};\r\n");
      out.write("				\r\n");
      out.write("				let markerImage = new kakao.maps.MarkerImage(imageUrl, imageSize, option);\r\n");
      out.write("				\r\n");
      out.write("				m.setImage(markerImage);\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		//추가하기\r\n");
      out.write("		$('#btn').click(function() {\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: 'POST', \r\n");
      out.write("				url: '/toy/map/addplace.do',\r\n");
      out.write("				data: {\r\n");
      out.write("					lat: lat,\r\n");
      out.write("					lng: lng,\r\n");
      out.write("					name: $('#name').val(),\r\n");
      out.write("					category: $('#category').val()\r\n");
      out.write("				},\r\n");
      out.write("				dataType: 'json',\r\n");
      out.write("				success: function(result) {\r\n");
      out.write("					\r\n");
      out.write("					if (result.result == 1) {\r\n");
      out.write("						\r\n");
      out.write("						$('#category').val('default');\r\n");
      out.write("						$('#name').val('');\r\n");
      out.write("						$('#name').select();\r\n");
      out.write("						\r\n");
      out.write("						//추가한 목록을 아래 테이블 출력\r\n");
      out.write("						load();\r\n");
      out.write("						\r\n");
      out.write("					} else {\r\n");
      out.write("						alert('failed');\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				error: function(a,b,c) {\r\n");
      out.write("					console.log(a,b,c);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		load(); //함수 호이스팅\r\n");
      out.write("		\r\n");
      out.write("		function load() {\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: 'GET',\r\n");
      out.write("				url: '/toy/map/listplace.do',\r\n");
      out.write("				dataType: 'json',\r\n");
      out.write("				success: function(result) {\r\n");
      out.write("					\r\n");
      out.write("					$('#list tbody').html('');\r\n");
      out.write("					\r\n");
      out.write("					$(result).each((index, item) => {\r\n");
      out.write("						\r\n");
      out.write("						$('#list tbody').append(`\r\n");
      out.write("						\r\n");
      out.write("							<tr>\r\n");
      out.write("								<td onclick=\"selPlace(${item.lat}, ${item.lng}, '${item.category}');\">\r\n");
      out.write("									<span>${item.name}</span>\r\n");
      out.write("									<span title=\"delete\" onclick=\"delPlace(${item.seq});\">&times;</span>\r\n");
      out.write("								</td>\r\n");
      out.write("							</tr>\r\n");
      out.write("								\r\n");
      out.write("						`);\r\n");
      out.write("						\r\n");
      out.write("					});\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				error: function(a,b,c) {\r\n");
      out.write("					console.log(a,b,c);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		function selPlace(lat, lng, category) {\r\n");
      out.write("			\r\n");
      out.write("			//해당 장소 > 위도, 경도 > 마커 출력하기\r\n");
      out.write("			//alert(lat + ',' + lng);\r\n");
      out.write("			\r\n");
      out.write("			if (m != null) {\r\n");
      out.write("				//기존 마커 제거\r\n");
      out.write("				m.setMap(null);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			//마커 이미지 추가\r\n");
      out.write("			let imageUrl = '/toy/asset/marker/'+ category +'.png';\r\n");
      out.write("				\r\n");
      out.write("			let imageSize = new kakao.maps.Size(40, 40);\r\n");
      out.write("				\r\n");
      out.write("			let option = {};\r\n");
      out.write("				\r\n");
      out.write("			let markerImage = new kakao.maps.MarkerImage(imageUrl, imageSize, option);\r\n");
      out.write("				\r\n");
      out.write("			\r\n");
      out.write("			m = new kakao.maps.Marker({\r\n");
      out.write("				position: new kakao.maps.LatLng(lat, lng)\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			m.setImage(markerImage);\r\n");
      out.write("			m.setMap(map);\r\n");
      out.write("			\r\n");
      out.write("			//map.setCenter()\r\n");
      out.write("			map.panTo(new kakao.maps.LatLng(lat, lng));\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			$('#list td').css('background-color', 'transparent');\r\n");
      out.write("			$(event.currentTarget).css('background-color', 'gold');\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function delPlace(seq){\r\n");
      out.write("			\r\n");
      out.write("			//장소 삭제\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type: 'POST',\r\n");
      out.write("				url: '/toy/map/delplace.do',\r\n");
      out.write("				data: {\r\n");
      out.write("					seq: seq\r\n");
      out.write("				},\r\n");
      out.write("				dataType: 'JSON',\r\n");
      out.write("				success: function(result){\r\n");
      out.write("					\r\n");
      out.write("					if(result.result ==1){\r\n");
      out.write("						\r\n");
      out.write("						//장소 삭제 완료\r\n");
      out.write("						if (m != null) {\r\n");
      out.write("							//기존 마커 제거\r\n");
      out.write("							m.setMap(null);\r\n");
      out.write("						} \r\n");
      out.write("						\r\n");
      out.write("						//목록 새로고침\r\n");
      out.write("						load();\r\n");
      out.write("						\r\n");
      out.write("					}else{\r\n");
      out.write("						alert('failed');\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				error: function(a,b,c){\r\n");
      out.write("					console.log(a,b,c);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			event.stopPropagation();\r\n");
      out.write("			event.cancelBubble = true;\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("	\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
